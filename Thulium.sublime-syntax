%YAML 1.2
---

name: Thulium Music

file_extensions:
  - tm
  - tml

scope: source.Thulium

variables:
  span: \d+(~\d+)?

contexts:

  main:
    - include: comment  # 注释
    - include: command  # 命令
    - include: track    # 音轨

  comment:
    # 行注释，使用双斜杠声明
    - match: ^//
      scope: comment.line.Thulium
      push:
        - meta_scope: meta.comment.Thulium
        - match: $
          pop: true

        # 分割线中央的字段被认为是乐章名
        - match: (-{3,})(?=.+-{3,}$)
          scope: comment.line.Thulium
          push: 
            - match: -{3,}$
              scope: comment.line.Thulium
              pop: true
            - match: .+(?!-|$)
              scope: entity.other.inherited-class section.name.Thulium
        - match: \S+
          scope: comment.line.Thulium

  command:
    # 内置命令，使用井号声明
    - match: ^#
      scope: keyword.operator.Thulium
      push:
        - meta_scope: meta.command.Thulium
        - match: $
          pop: true
        - match: '[Ee]nd'
          scope: keyword.declaration.Thulium
        - match: '[Ii]nclude'
          scope: keyword.declaration.Thulium
          push: library.include
        - match: '[Cc]hord'
          scope: keyword.command.Thulium
          push: library.chord
        - match: '[Ff]unction'
          scope: keyword.command.Thulium
          push: JavaScript.sublime-syntax
          with_prototype:
            - match: ^#
              scope: keyword.operator.Thulium
              pop: true
        - match: '[Ss]ettings'
          scope: keyword.command.Thulium
          push: library.settings
        - match: '\S+(?=[ \t])'
          scope: invalid.command.Thulium

  library.include:
    - meta_scope: meta.include.Thulium
    - match: $
      pop: true
    - match: '[a-zA-Z]\w*'
      scope: string.unquoted package.name.Thulium
    - match: \"
      scope: string.quoted.single.Thulium
      push: tmPath.sublime-syntax
      with_prototype:
        - match: \"
          scope: string.quoted.single.Thulium
          pop: true

  library.chord:
    - meta_scope: meta.chord.Thulium
    - match: ^#
      scope: keyword.operator.Thulium
      pop: true
    - match: ^[a-zA-Z](?=[\n\t])
      scope: variable.function library.chord.operator.Thulium
      push: 
        - match: \t+([^\t]+\t+)?
          scope: comment.line.Thulium
        - match: \[
          scope: constant.character library.chord.bracket.Thulium
          push:
            - match: ($|\])
              scope: constant.character library.chord.bracket.Thulium
              pop: true
            - match: '[+\-]?\d'
              scope: variable.function library.chord.index.Thulium
            - match: ':'
              scope: constant.character library.chord.tooperator.Thulium
        - match: '[+\-]?\d'
          scope: variable.function library.chord.index.Thulium
        - match: ','
          scope: constant.character library.chord.comma.Thulium
        - match: $
          pop: true
    - match: ^[^#\n\t].*
      scope: invalid.library.Thulium
  
  library.settings:
    # 这部分规范未确定
    - meta_scope: meta.settings.Thulium
    - match: ^#
      scope: keyword.operator.Thulium
      pop: true
    - match: '^[ -]*[a-zA-Z]\w*'
      scope: storage.type.Thulium
      push: 
        - meta_scope: meta.value.settings.Thulium
        - match: $
          pop: true
        - match: '[a-zA-Z]\w*'
          scope: string.unquoted.Thulium
        - match: (\d|[Aa]utomatic|[Tt]rue|[Ff]alse)
          scope: constant.language.Thulium

  track:
    # 音轨主体
    - match: <:?(?=[a-zA-Z\s])
      scope: entity.name track.bracket.Thulium
      push:
        # 音轨头
        - meta_scope: meta.track.Thulium
        - match: (?=:?>)
          pop: true
        # 音轨名
        - match: ([a-zA-Z]\w*)(:)
          captures:
            1: entity.other.inherited-class track.name.Thulium
            2: entity.name track.colon.Thulium
        - match: ','
          scope: entity.name track.comma.Thulium
        # 乐器名
        - match: '[a-zA-Z]\w*'
          scope: string.unquoted track.instrument.Thulium
          push: 
            - match: (?=[,>])
              pop: true
            - include: subtrack
    - match: :?>
      scope: entity.name track.bracket.Thulium
      pop: true
    - match: (?=.)
      push: subtrack
      with_prototype:
        - match: $\s*^
          pop: true

  subtrack.comment:
    # 音轨内注释
    - match:  <\*
      scope: marker.comment.Thulium
      push: 
        - meta_scope: track.comment.Thulium
        - match: \*>
          scope: marker.comment.Thulium
          pop: true

  subtrack:
    - meta_scope: meta.track.Thulium
    - include: subtrack.comment
    - match: \)
      scope: constant.character function.bracket.Thulium
    - match: ([a-zA-Z][a-zA-Z\d]* *)(\()
      captures:
        1: keyword.other function.name.Thulium
        2: constant.character function.bracket.Thulium
      push: function.argument
    - match: \(
      scope: bracket.function.Thulium
      push:
        # name: 函数名
        # identifier: 简记法标识符
        # bracket: 函数括号
        - meta_scope: alias.function.Thulium
        - match: (?=\))
          scope: bracket.function.Thulium
          pop: true
        - match: '([a-zA-Z]\w*)(:)'
          captures:
            1: name.function.Thulium
            2: bracket.function.Thulium
          push: function.argument
        - include: package-standard.sublime-syntax

    - match: '[~$]'
      scope: identifier.function.Thulium
    - match: '[!&*\^+s]'
      scope: operator.track.Thulium

    - match: '(\|)(\|:)'
      captures:
        1: barline.track.Thulium
        2: barline-plain.track.Thulium
    - match: '(:?\|)(\|)'
      captures:
        1: barline-plain.track.Thulium
        2: barline.track.Thulium
    - match: (\{)(?:(\d+)(\*))?
      captures:
        1: subtrack.track.Thulium
        2: repeat-number.track.Thulium
        3: repeat.track.Thulium
      push: 
        - match: \}
          scope: subtrack.track.Thulium
          pop: true
        - include: track.general
    - match: '[\|/]'
      scope: barline.track.Thulium
    - match: \\(?=({{span}}(,{{span}})*)?:)
      scope: barline.track.Thulium
      push: 
        - match: ':'
          scope: repeat.track.Thulium
          pop: true
        - match: '[~,]'
          scope: repeat.track.Thulium
        - match: \d+
          scope: repeat-number.track.Thulium
    - match: \[(?=({{span}}\.)+\])
      scope: barline.track.Thulium
      push: 
        - match: \]
          scope: barline.track.Thulium
          pop: true
        - match: '[~\.]'
          scope: repeat.track.Thulium
        - match: \d+
          scope: repeat-number.track.Thulium
    - match: DC|DS|Coda|ToCoda|DaCapo|DaSegno|Fine
      scope: operator.track
      
    - match: '(@)([a-zA-Z]\w*)'
      captures:
        1: punctuation.track.Thulium
        2: name.track.Thulium
    - include: note.sublime-syntax

  function.argument:
    - match: (?=\))
      pop: true
    - match: (?=[;\)])
      pop: true
    - match: ','
      scope: bracket.function.Thulium
    - include: number.sublime-syntax
    - match: \{(\d+\*)?
      scope: subtrack.track.Thulium
      push:
        - match: \}
          scope: subtrack.track.Thulium
          pop: true
        - include: subtrack
    - match: \[
      scope: bracket.function.Thulium
      push: 
        - match: \]
          scope: bracket.function.Thulium
          pop: true
        - include: function.argument
    - match: \"
      scope: bracket.function.Thulium
      push: 
        - match: \"
          scope: bracket.function.Thulium
          pop: true
        - match: \\.
          scope: number.expression.Thulium
        - match: .
          scope: number.expression.Thulium


